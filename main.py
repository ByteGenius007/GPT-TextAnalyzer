import telebot
import config
import ya
import json
import os
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

API_TOKEN = config.API_TOKEN
bot = telebot.TeleBot(API_TOKEN)


def update_stats(user_id, username):
    stats_file = "stats.json"
    stats = {}

    if os.path.exists(stats_file):
        with open(stats_file, "r", encoding="utf-8") as f:
            stats = json.load(f)

    user_id_str = str(user_id)
    if user_id_str not in stats:
        stats[user_id_str] = {
            "username": username or "unknown",
            "total_requests": 0,
            "last_seen": ""
        }

    stats[user_id_str]["total_requests"] += 1
    stats[user_id_str]["last_seen"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    with open(stats_file, "w", encoding="utf-8") as f:
        json.dump(stats, f, indent=2, ensure_ascii=False)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∏ —è —Å–∫–∞–∂—É:\n"
        "üìå –¢–µ–º—É\nüß† –°—É—Ç—å\nüòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\nüîé –¢–∏–ø —Ç–µ–∫—Å—Ç–∞\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /help, /stats"
    )


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id,
        "üõ† –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç ‚Äî —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å\n"
        "‚Ä¢ –Ø –≤–µ–¥—É —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "–ö–æ–º–∞–Ω–¥–∞: /stats ‚Äî —É–∑–Ω–∞—Ç—å —Å–≤–æ—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"
    )


@bot.message_handler(commands=['stats'])
def send_stats(message):
    user_id = str(message.from_user.id)
    if os.path.exists("stats.json"):
        with open("stats.json", "r", encoding="utf-8") as f:
            stats = json.load(f)

        if user_id in stats:
            user_stats = stats[user_id]
            bot.send_message(message.chat.id,
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_stats['username']}\n"
                f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {user_stats['total_requests']}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_stats['last_seen']}"
            )
            return
    bot.send_message(message.chat.id, "–¢—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ç–µ–∫—Å—Ç–æ–≤.")


@bot.message_handler(func=lambda message: True)
def analyze_text(message):
    bot.send_chat_action(message.chat.id, 'typing')

    text = message.text
    result = ya.gpt(text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    user_file = f"history_{message.from_user.id}.txt"
    with open(user_file, "a", encoding="utf-8") as file:
        file.write(f"User: {message.from_user.username or message.from_user.id}\n")
        file.write(f"Text: {text}\n")
        file.write(f"Result:\n{result}\n")
        file.write("-" * 40 + "\n")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    update_stats(message.from_user.id, message.from_user.username)

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
    markup = get_main_markup()
    markup.add(InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", callback_data="saved"))

    bot.send_message(message.chat.id, result, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = str(call.from_user.id)

    if call.data == "show_stats":
        if os.path.exists("stats.json"):
            with open("stats.json", "r", encoding="utf-8") as f:
                stats = json.load(f)
            if user_id in stats:
                s = stats[user_id]
                bot.answer_callback_query(call.id)
                bot.send_message(call.message.chat.id,
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{s['username']}\n"
                    f"–ó–∞–ø—Ä–æ—Å–æ–≤: {s['total_requests']}\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {s['last_seen']}"
                )
            else:
                bot.send_message(call.message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–±–µ.")

    elif call.data == "export_history":
        path = f"history_{user_id}.txt"
        if os.path.exists(path):
            bot.send_document(call.message.chat.id, open(path, "rb"))
        else:
            bot.send_message(call.message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        bot.answer_callback_query(call.id)

    elif call.data == "delete_history":
        path = f"history_{user_id}.txt"
        if os.path.exists(path):
            os.remove(path)
            bot.send_message(call.message.chat.id, "üóë –ò—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞.")
        else:
            bot.send_message(call.message.chat.id, "–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏.")
        bot.answer_callback_query(call.id)

    elif call.data == "saved":
        bot.answer_callback_query(call.id, "–ê–Ω–∞–ª–∏–∑ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üëç")

def get_main_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"))
    markup.add(InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏", callback_data="export_history"))
    markup.add(InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="delete_history"))
    return markup


bot.infinity_polling()
